import React, { useState } from "react";
import { View, Text, TouchableOpacity, StyleSheet } from "react-native";

type Question = {
  pattern: string;
  options: string[];
  correctAnswer: string;
};

const questions: Question[] = [
  { pattern: "üî∫ üî∫ ‚ö™ üî∫ üî∫ ‚ö™ ‚ùì", options: ["üî∫", "‚ö´", "üîª"], correctAnswer: "üî∫" },
  { pattern: "üåô ‚òÄÔ∏è üåô ‚òÄÔ∏è üåô ‚ùì", options: ["‚òÄÔ∏è", "üåô", "‚≠ê"], correctAnswer: "‚òÄÔ∏è" },
  { pattern: "üê∂ üê∂ üê± üê∂ üê∂ üê± ‚ùì", options: ["üê∂", "üê±", "üê∞"], correctAnswer: "üê∂" },
  { pattern: "üî∑ üî∑ üî∑ ‚ö™ üî∑ üî∑ üî∑ ‚ö™ ‚ùì", options: ["‚ö™", "üî∑", "üî∂"], correctAnswer: "üî∑" },
  { pattern: "üöó üöô üöó üöô üöó‚ùì", options: ["üöï", "üöó", "üöô"], correctAnswer: "üöô" },
  { pattern: "üçé üçè üçé üçè üçé ‚ùì", options: ["üçè", "üçé", "üçá"], correctAnswer: "üçè" },
  { pattern: "üëü üëü üß¶ üëü üëü üß¶ ‚ùì", options: ["üß¶", "üëü", "üé©"], correctAnswer: "üëü" },
  { pattern: "üî≤ üî≥ üî≤ üî≥ ‚ùì", options: ["üî≥", "üî≤", "‚ö´"], correctAnswer: "üî≤" },
  { pattern: "üéà üéà üéÅ üéà üéà üéÅ ‚ùì", options: ["üéÅ", "üéà", "üéÇ"], correctAnswer: "üéà" },
  { pattern: "üê∏ üê∏ üê∏ ü¶Ü üê∏ üê∏ üê∏ ü¶Ü ‚ùì", options: ["ü¶Ü", "üê∏", "üê¢"], correctAnswer: "üê∏" },
  { pattern: "üå∏ üåº üå∏ üåº üå∏ ‚ùì", options: ["üå∏", "üåº", "üå∫"], correctAnswer: "üåº" },
  { pattern: "üçá üçá üçé üçá üçá üçé ‚ùì", options: ["üçé", "üçá", "üçâ"], correctAnswer: "üçá" },
  { pattern: "ü•á ü•à ü•á ü•â ü•á ‚ùì", options: ["ü•à", "ü•á", "ü•â"], correctAnswer: "ü•à" },
  { pattern: "üç™ üç© üç™ üç© üç™ ‚ùì", options: ["üç™", "üç©", "üç´"], correctAnswer: "üç©" },
  { pattern: "üî≤ üî≥ üî≤ üî≤ üî≥ üî≤ ‚ùì", options: ["üî≥", "üî≤", "‚ö´"], correctAnswer: "üî≥" },
  { pattern: "üçí üçì üçí üçì üçí ‚ùì", options: ["üçí", "üçì", "üçâ"], correctAnswer: "üçì" },
  { pattern: "ü¶Ñ ü¶Ñ ü¶Ñ ü¶Ñ ü¶Ñ ü¶Ñ ‚ùì", options: ["ü¶Ñ", "üê¥", "ü¶ì"], correctAnswer: "ü¶Ñ" },
];


const Game5 = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [message, setMessage] = useState("");

  const currentQuestion = questions[currentIndex];

  const handleAnswer = (selected: string) => {
    if (selected === currentQuestion.correctAnswer) {
      if (currentIndex < questions.length - 1) {
        setMessage("Doƒüru!");
        setTimeout(() => {
          setCurrentIndex(currentIndex + 1);
          setMessage("");
        }, 1000);
      } else {
        setMessage("Tebrikler! T√ºm sorularƒ± bitirdiniz.");
      }
    } else {
      setMessage("Yanlƒ±≈ü! Tekrar dene.");
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>√ñr√ºnt√ºy√º Tamamla</Text>
      <Text style={styles.pattern}>{currentQuestion.pattern}</Text>

      <View style={styles.optionsContainer}>
        {currentQuestion.options.map((option, index) => (
          <TouchableOpacity
            key={index}
            style={styles.optionButton}
            onPress={() => handleAnswer(option)}
          >
            <Text style={styles.optionText}>{option}</Text>
          </TouchableOpacity>
        ))}
      </View>

      {message !== "" && <Text style={styles.message}>{message}</Text>}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    justifyContent: "center",
    backgroundColor: "#fffdf0",
  },
  title: {
    fontSize: 28,
    fontWeight: "bold",
    textAlign: "center",
    marginBottom: 20,
    color: "#f0d000",
  },
  pattern: {
    fontSize: 32,
    textAlign: "center",
    marginVertical: 24,
  },
  optionsContainer: {
    flexDirection: "row",
    justifyContent: "space-around",
    marginVertical: 16,
  },
  optionButton: {
    backgroundColor: "#ffffff",
    borderWidth: 2,
    borderColor: "#ccc",
    borderRadius: 12,
    padding: 16,
    elevation: 3,
  },
  optionText: {
    fontSize: 28,
  },
  message: {
    marginTop: 30,
    fontSize: 20,
    textAlign: "center",
    color: "#444",
  },
});

export default Game5;
